def Floyd_Warshall(W):
    n = len(W)
    for k in range(0,n):
        for i in range(0,n):
            for j in range(0,n):
                W[i][j] = min(W[i][j],W[i][k]+W[k][j])
    return W

def Floyd_Warshall_hetland(W):
    D = W
    n = len(W)
    for k in range(0,n):
        if k == 3:
            return D
        for u in range(0,n-1):
            for v in range(0,n-1):
                D[u][v] = min(D[u][v],D[u][k]+D[k][v])
    return D


W = [[0,3,1000,1000,1000,1000,1000],
    [1000,0,4,9,1000,5,1000],
    [1000,1000,0,4,5,1000,1000],
    [3,1000,1000,0,1000,1000,1],
    [1000,1000,1000,5,0,1000,4],
    [4,1000,1000,1000,1,0,1000],
    [1000,1000,1000,1000,1000,2,0]]

test = [[0,   5,  1000, 10],
       [1000,  0,  3,  1000],
       [1000, 1000, 0,   1],
       [1000, 1000, 1000, 0]]


oving = [[0,1000,1000,1000,-1,1000],
         [1,0,1000,2,1000,1000],
         [1000,2,0,1000,1000,-8],
         [-4,1000,1000,0,3,1000],
         [1000,7,1000,1000,0,1000],
         [1000,5,10,1000,1000,0]]

print (Floyd_Warshall(W)[0])

